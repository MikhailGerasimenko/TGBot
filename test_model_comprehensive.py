#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ GigaChat-20B-A3B-instruct
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –ø–æ–∏—Å–∫, —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import requests
import time
import json
import statistics
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MODEL_SERVICE_URL = "http://localhost:8000"

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        response = requests.get(f"{MODEL_SERVICE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ú–æ–¥–µ–ª—å: {data.get('model_path', 'N/A')}")
            print(f"   GPU —Å–ª–æ–∏: {data.get('gpu_layers', 'N/A')}")
            print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {data.get('ctx', 'N/A')}")
            print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {data.get('embedding_model', 'N/A')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_generation(prompt, max_tokens=100, expected_time=10):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    print(f"\nüìù –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt[:50]}...")
    
    start_time = time.time()
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/generate",
            json={"query": prompt, "max_tokens": max_tokens},
            timeout=60
        )
        generation_time = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            response_text = data.get('response', '')
            tokens = data.get('completion_tokens', 0)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ ({generation_time:.2f}—Å)")
            print(f"   –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {tokens/generation_time:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
            print(f"   –û—Ç–≤–µ—Ç: {response_text[:200]}...")
            
            return {
                'success': True,
                'time': generation_time,
                'tokens': tokens,
                'speed': tokens/generation_time
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return {'success': False}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {'success': False}

def test_embeddings(text):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print(f"\nüî¢ –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {text[:30]}...")
    
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/embeddings",
            json={"text": text},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            embedding = data.get('embedding', [])
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ")
            print(f"   –†–∞–∑–º–µ—Ä: {len(embedding)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_search(query, top_k=5):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print(f"\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞: {query}")
    
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/search",
            json={"query": query, "top_k": top_k},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results[:3], 1):
                print(f"   {i}. –°—Ö–æ–∂–µ—Å—Ç—å: {result.get('score', 0):.3f}")
                print(f"      –¢–µ–∫—Å—Ç: {result.get('text', '')[:100]}...")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_prompts = [
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –∫–æ—Ç–∞",
        "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è?",
        "–û–ø–∏—à–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?"
    ]
    
    results = []
    
    for i, prompt in enumerate(test_prompts, 1):
        print(f"\n--- –¢–µ—Å—Ç {i}/{len(test_prompts)} ---")
        result = test_generation(prompt, max_tokens=80)
        if result.get('success'):
            results.append(result)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    if results:
        times = [r['time'] for r in results]
        speeds = [r['speed'] for r in results]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {statistics.mean(times):.2f}—Å")
        print(f"   –ú–∏–Ω. –≤—Ä–µ–º—è: {min(times):.2f}—Å")
        print(f"   –ú–∞–∫—Å. –≤—Ä–µ–º—è: {max(times):.2f}—Å")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {statistics.mean(speeds):.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        print(f"   –ú–∏–Ω. —Å–∫–æ—Ä–æ—Å—Ç—å: {min(speeds):.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        print(f"   –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: {max(speeds):.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")

def test_corporate_scenarios():
    """–¢–µ—Å—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print(f"\nüè¢ –¢–µ—Å—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    corporate_prompts = [
        "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç?",
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞?",
        "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –°–û–ü –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω",
        "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ?",
        "–ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –ø–æ–ª–æ–∂–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –¥–µ—Ç—å–º–∏?"
    ]
    
    for i, prompt in enumerate(corporate_prompts, 1):
        print(f"\n--- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç {i}/{len(corporate_prompts)} ---")
        test_generation(prompt, max_tokens=120)
        time.sleep(2)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ GigaChat-20B-A3B-instruct")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if not test_health():
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.")
        return
    
    # 2. –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    test_embeddings("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    # 3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    test_search("–æ—Ç–ø—É—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    
    # 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_performance()
    
    # 5. –¢–µ—Å—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    test_corporate_scenarios()
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 