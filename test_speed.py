#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
"""

import requests
import time
import json
from datetime import datetime

def test_generation_speed(prompt, max_tokens=100, iterations=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    print(f"–ü—Ä–æ–º–ø—Ç: {prompt[:50]}...")
    print(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {max_tokens}")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
    print("-" * 50)
    
    speeds = []
    times = []
    tokens = []
    
    for i in range(iterations):
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
        
        start_time = time.time()
        
        try:
            response = requests.post(
                "http://localhost:8000/generate",
                json={
                    "query": prompt,
                    "max_tokens": max_tokens,
                    "temperature": 0.7,
                    "top_p": 0.9
                },
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                end_time = time.time()
                
                generation_time = result['generation_time']
                completion_tokens = result['completion_tokens']
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                speed = completion_tokens / generation_time
                speeds.append(speed)
                times.append(generation_time)
                tokens.append(completion_tokens)
                
                print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {generation_time:.2f} —Å–µ–∫")
                print(f"  üìä –¢–æ–∫–µ–Ω–æ–≤: {completion_tokens}")
                print(f"  ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ç/—Å")
                print(f"  üìù –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
                
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"  üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 50)
    
    if speeds:
        avg_speed = sum(speeds) / len(speeds)
        avg_time = sum(times) / len(times)
        avg_tokens = sum(tokens) / len(tokens)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"  –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} —Ç/—Å")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤: {avg_tokens:.0f}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {min(speeds):.1f} —Ç/—Å")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {max(speeds):.1f} —Ç/—Å")
        
        return avg_speed
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return 0

def test_embeddings_speed(texts, iterations=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    print(f"–¢–µ–∫—Å—Ç–æ–≤: {len(texts)}")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
    print("-" * 50)
    
    times = []
    
    for i in range(iterations):
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
        
        try:
            response = requests.post(
                "http://localhost:8000/embeddings",
                json={"texts": texts},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                embedding_time = result['embedding_time']
                times.append(embedding_time)
                
                print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {embedding_time:.3f} —Å–µ–∫")
                print(f"  üìä –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {len(result['embeddings'])}")
                print(f"  üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(result['embeddings'][0])}")
                
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 50)
    
    if times:
        avg_time = sum(times) / len(times)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ú–ë–ï–î–î–ò–ù–ì–û–í:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f} —Å–µ–∫")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(times):.3f} —Å–µ–∫")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(times):.3f} —Å–µ–∫")
        
        return avg_time
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return 0

def test_search_speed(query, iterations=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞...")
    print(f"–ó–∞–ø—Ä–æ—Å: {query}")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
    print("-" * 50)
    
    times = []
    
    for i in range(iterations):
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
        
        start_time = time.time()
        
        try:
            response = requests.post(
                "http://localhost:8000/search",
                json={"query": query, "top_k": 5},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                end_time = time.time()
                search_time = end_time - start_time
                times.append(search_time)
                
                print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {search_time:.3f} —Å–µ–∫")
                print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result['hits'])}")
                if result['hits']:
                    print(f"  üéØ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['hits'][0]['text'][:100]}...")
                
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 50)
    
    if times:
        avg_time = sum(times) / len(times)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f} —Å–µ–∫")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(times):.3f} —Å–µ–∫")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(times):.3f} —Å–µ–∫")
        
        return avg_time
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–û–†–û–°–¢–ò –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
        print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        return
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    gen_speed = test_generation_speed(
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ?",
        max_tokens=150,
        iterations=3
    )
    
    # –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    emb_time = test_embeddings_speed([
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
        "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞",
        "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–∞–º –≤–∏–¥–µ—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    ], iterations=3)
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    search_time = test_search_speed(
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        iterations=3
    )
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {gen_speed:.1f} —Ç/—Å")
    print(f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {emb_time:.3f} —Å–µ–∫")
    print(f"–ü–æ–∏—Å–∫: {search_time:.3f} —Å–µ–∫")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    
    if gen_speed < 15:
        print("  - –£–≤–µ–ª–∏—á–∏—Ç—å LLAMA_GPU_LAYERS –¥–æ 80-120")
        print("  - –£–≤–µ–ª–∏—á–∏—Ç—å LLAMA_BATCH –¥–æ 2048")
        print("  - –£–º–µ–Ω—å—à–∏—Ç—å LLAMA_CTX –¥–æ 4096")
        print("  - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å (q4_k_m)")
    
    if emb_time > 0.1:
        print("  - –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å GPU")
    
    if search_time > 0.05:
        print("  - –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å")

if __name__ == "__main__":
    main() 