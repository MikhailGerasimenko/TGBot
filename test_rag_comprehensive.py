 #!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç RAG —Ñ—É–Ω–∫—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é, –ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
"""

import requests
import time
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MODEL_SERVICE_URL = "http://localhost:8000"

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        response = requests.get(f"{MODEL_SERVICE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ö–æ—Ä–ø—É—Å: {data.get('corpus_size', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_index_documents():
    """–¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print(f"\nüìö –¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_docs = [
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞–µ—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–¥–µ–ª–∞.",
        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ü—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∏–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏–∫–∞–∑ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞.",
        "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É.",
        "–°–û–ü (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ü—Ä–æ—Ü–µ–¥—É—Ä–∞) - —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –∫–æ–º–ø–∞–Ω–∏–∏.",
        "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ —Å–ª—É–∂–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∏–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω –ø–æ–≤—ã—à–µ–Ω–∏—è."
    ]
    
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/index",
            json={"documents": test_docs},
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            print(f"   –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {data.get('indexed', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_search(query, top_k=3):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print(f"\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞: '{query}'")
    
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/search",
            json={"query": query, "top_k": top_k},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('hits', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results, 1):
                print(f"   {i}. –°—Ö–æ–∂–µ—Å—Ç—å: {result.get('score', 0):.3f}")
                print(f"      –¢–µ–∫—Å—Ç: {result.get('text', '')[:100]}...")
            
            return results
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def test_generation_with_context(query, context, max_tokens=150):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print(f"\nüìù –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: '{query}'")
    
    start_time = time.time()
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/generate",
            json={
                "query": query,
                "context": context,
                "max_tokens": max_tokens
            },
            timeout=60
        )
        generation_time = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            response_text = data.get('response', '')
            tokens = data.get('completion_tokens', 0)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ ({generation_time:.2f}—Å)")
            print(f"   –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
            print(f"   –û—Ç–≤–µ—Ç: {response_text[:200]}...")
            
            return {
                'success': True,
                'response': response_text,
                'time': generation_time,
                'tokens': tokens
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return {'success': False}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {'success': False}

def test_search_v2(query, top_k=3):
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ v2"""
    print(f"\n‚ö° –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ v2: '{query}'")
    
    try:
        response = requests.post(
            f"{MODEL_SERVICE_URL}/search_v2",
            json={"query": query, "top_k": top_k},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('hits', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results, 1):
                print(f"   {i}. –°—Ö–æ–∂–µ—Å—Ç—å: {result.get('score', 0):.3f}")
                print(f"      –¢–µ–∫—Å—Ç: {result.get('text', '')[:100]}...")
            
            return results
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ v2: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def test_rag_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ RAG workflow"""
    print(f"\nüîÑ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ RAG workflow...")
    
    # 1. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    if not test_index_documents():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        return False
    
    time.sleep(2)
    
    # 2. –ü–æ–∏—Å–∫
    search_results = test_search("–æ—Ç–ø—É—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã", top_k=2)
    if not search_results:
        print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return False
    
    time.sleep(2)
    
    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    context = "\n".join([result['text'] for result in search_results])
    generation_result = test_generation_with_context(
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–ø—É—Å–∫–∞?",
        context,
        max_tokens=200
    )
    
    if not generation_result.get('success'):
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    time.sleep(2)
    
    # 4. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ v2
    test_search_v2("–±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç", top_k=2)
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç RAG —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if not test_health():
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.")
        return
    
    # 2. –¢–µ—Å—Ç RAG workflow
    if test_rag_workflow():
        print(f"\nüéâ RAG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå RAG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
    
    print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 