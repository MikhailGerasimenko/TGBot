#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –≤ Telegram
"""

import asyncio
import time
from typing import Optional, Callable
from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import emoji

class ProgressBar:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤"""
    
    def __init__(self, bot: Bot, chat_id: int, message_id: Optional[int] = None):
        self.bot = bot
        self.chat_id = chat_id
        self.message_id = message_id
        self.start_time = time.time()
        self.is_active = False
        
    async def start(self, text: str = "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...") -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        self.is_active = True
        self.start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_text = self._create_progress_text(text, 0)
        
        message = await self.bot.send_message(
            chat_id=self.chat_id,
            text=progress_text,
            parse_mode="HTML"
        )
        
        self.message_id = message.message_id
        return self.message_id
    
    async def update(self, progress: float, text: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if not self.is_active or not self.message_id:
            return False
            
        try:
            progress_text = self._create_progress_text(text or "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", progress)
            
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=progress_text,
                parse_mode="HTML"
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    async def complete(self, final_text: str = "‚úÖ –ì–æ—Ç–æ–≤–æ!") -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if not self.is_active or not self.message_id:
            return False
            
        try:
            elapsed_time = time.time() - self.start_time
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"""
{final_text}

‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed_time:.1f} —Å–µ–∫
üéØ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ
            """.strip()
            
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=final_message,
                parse_mode="HTML"
            )
            
            self.is_active = False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    async def error(self, error_text: str = "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏") -> bool:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ"""
        if not self.is_active or not self.message_id:
            return False
            
        try:
            elapsed_time = time.time() - self.start_time
            
            error_message = f"""
{error_text}

‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_time:.1f} —Å–µ–∫
üéØ –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞
            """.strip()
            
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=error_message,
                parse_mode="HTML"
            )
            
            self.is_active = False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _create_progress_text(self, text: str, progress: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1
        progress = max(0, min(1, progress))
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 20
        filled_length = int(bar_length * progress)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        percentage = int(progress * 100)
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if progress < 0.3:
            emoji_icon = "ü§î"
        elif progress < 0.7:
            emoji_icon = "üí≠"
        elif progress < 1.0:
            emoji_icon = "‚ú®"
        else:
            emoji_icon = "‚úÖ"
        
        # –í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞
        elapsed_time = time.time() - self.start_time
        
        progress_text = f"""
{emoji_icon} <b>{text}</b>

<code>{bar}</code> {percentage}%

‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_time:.1f} —Å–µ–∫
üéØ –°—Ç–∞—Ç—É—Å: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
        """.strip()
        
        return progress_text

class ProgressManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_bars = {}
    
    async def start_progress(self, chat_id: int, text: str = "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...") -> int:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.stop_progress(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        progress_bar = ProgressBar(self.bot, chat_id)
        message_id = await progress_bar.start(text)
        
        self.active_bars[chat_id] = progress_bar
        return message_id
    
    async def update_progress(self, chat_id: int, progress: float, text: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if chat_id not in self.active_bars:
            return False
        
        return await self.active_bars[chat_id].update(progress, text)
    
    async def complete_progress(self, chat_id: int, final_text: str = "‚úÖ –ì–æ—Ç–æ–≤–æ!") -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if chat_id not in self.active_bars:
            return False
        
        success = await self.active_bars[chat_id].complete(final_text)
        if success:
            del self.active_bars[chat_id]
        return success
    
    async def error_progress(self, chat_id: int, error_text: str = "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏") -> bool:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ"""
        if chat_id not in self.active_bars:
            return False
        
        success = await self.active_bars[chat_id].error(error_text)
        if success:
            del self.active_bars[chat_id]
        return success
    
    async def stop_progress(self, chat_id: int) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if chat_id not in self.active_bars:
            return False
        
        try:
            await self.active_bars[chat_id].complete("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            del self.active_bars[chat_id]
            return True
        except:
            return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def update_progress_async(progress_manager: ProgressManager, chat_id: int, 
                              duration: float = 10.0, steps: int = 20):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    step_duration = duration / steps
    
    for i in range(steps + 1):
        if chat_id not in progress_manager.active_bars:
            break
            
        progress = i / steps
        
        # –†–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
        if progress < 0.3:
            text = "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å..."
        elif progress < 0.6:
            text = "üí≠ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
        elif progress < 0.9:
            text = "‚ú® –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
        else:
            text = "‚úÖ –ó–∞–≤–µ—Ä—à–∞—é..."
        
        await progress_manager.update_progress(chat_id, progress, text)
        await asyncio.sleep(step_duration) 