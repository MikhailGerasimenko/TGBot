#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Docker
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [gpu|cpu] [dev|prod]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
DEPLOY_TYPE=${1:-cpu}
ENVIRONMENT=${2:-dev}

if [[ "$DEPLOY_TYPE" != "gpu" && "$DEPLOY_TYPE" != "cpu" ]]; then
    log_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–µ–ø–ª–æ—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'gpu' –∏–ª–∏ 'cpu'"
    exit 1
fi

if [[ "$ENVIRONMENT" != "dev" && "$ENVIRONMENT" != "prod" ]]; then
    log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'dev' –∏–ª–∏ 'prod'"
    exit 1
fi

log_info "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"
log_info "–¢–∏–ø: $DEPLOY_TYPE"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [[ ! -f "../.env" ]]; then
    log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    log_info "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è GPU
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    if [[ ! -f "../models/model-gigachat_20b_bf16.gguf" ]]; then
        log_warning "BF16 –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞–µ–º..."
        cd ..
        ./download_model.sh gigachat_20b_bf16
        cd docker/scripts
    fi
else
    if [[ ! -f "../models/model-gigachat_20b_q8_0.gguf" ]]; then
        log_warning "Q8_0 –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞–µ–º..."
        cd ..
        ./download_model.sh gigachat_20b_q8_0
        cd docker/scripts
    fi
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
cd ..
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    docker-compose -f docker/docker-compose.gpu.yml down
else
    docker-compose -f docker/docker-compose.yml down
fi

# –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [[ "$ENVIRONMENT" == "prod" ]]; then
    log_info "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker system prune -f
fi

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
log_info "üî® –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑—ã..."
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    docker-compose -f docker/docker-compose.gpu.yml build --no-cache
else
    docker-compose -f docker/docker-compose.yml build --no-cache
fi

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    docker-compose -f docker/docker-compose.gpu.yml up -d
else
    docker-compose -f docker/docker-compose.yml up -d
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    docker-compose -f docker/docker-compose.gpu.yml ps
else
    docker-compose -f docker/docker-compose.yml ps
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
log_info "üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ model service
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    log_success "‚úÖ Model Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_error "‚ùå Model Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs model-service"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
if curl -f http://localhost:80 > /dev/null 2>&1; then
    log_success "‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_error "‚ùå Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
log_success "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
log_info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    docker-compose -f docker/docker-compose.gpu.yml ps
else
    docker-compose -f docker/docker-compose.yml ps
fi

echo ""
log_info "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "  - API: http://localhost:8000"
echo "  - Nginx: http://localhost:80"
echo "  - Health Check: http://localhost:8000/health"

if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    echo "  - Grafana: http://localhost:3000 (admin/admin)"
fi

echo ""
log_info "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  - –õ–æ–≥–∏: docker-compose -f docker/docker-compose.yml logs -f"
echo "  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker/docker-compose.yml down"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker/docker-compose.yml restart"

if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
    echo "  - GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: nvidia-smi"
fi

echo ""
log_success "ü§ñ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!" 