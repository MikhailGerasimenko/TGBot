#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –±–æ—Ç–æ–º –≤ Docker
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh [start|stop|restart|logs|status|update]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–ø–ª–æ—è
get_deploy_type() {
    if docker ps | grep -q "corporate-bot-model-gpu"; then
        echo "gpu"
    elif docker ps | grep -q "corporate-bot-model"; then
        echo "cpu"
    else
        echo "unknown"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ compose —Ñ–∞–π–ª–∞
get_compose_file() {
    local deploy_type=$1
    if [[ "$deploy_type" == "gpu" ]]; then
        echo "docker/docker-compose.gpu.yml"
    else
        echo "docker/docker-compose.yml"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ $# -eq 0 ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [start|stop|restart|logs|status|update|backup|restore]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start   - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  status  - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  update  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  backup  - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    echo "  restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    exit 1
fi

COMMAND=$1
SERVICE=${2:-""}

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd "$(dirname "$0")/../.."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–ø–ª–æ—è
DEPLOY_TYPE=$(get_deploy_type)
COMPOSE_FILE=$(get_compose_file $DEPLOY_TYPE)

if [[ "$DEPLOY_TYPE" == "unknown" ]]; then
    log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–µ–ø–ª–æ—è. –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    DEPLOY_TYPE="cpu"
    COMPOSE_FILE="docker/docker-compose.yml"
fi

log_info "–¢–∏–ø –¥–µ–ø–ª–æ—è: $DEPLOY_TYPE"
log_info "Compose —Ñ–∞–π–ª: $COMPOSE_FILE"

case $COMMAND in
    start)
        log_info "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f $COMPOSE_FILE up -d
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
        ;;
        
    stop)
        log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f $COMPOSE_FILE down
        log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
        
    restart)
        log_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f $COMPOSE_FILE restart
        log_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        ;;
        
    logs)
        if [[ -n "$SERVICE" ]]; then
            log_info "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $SERVICE:"
            docker-compose -f $COMPOSE_FILE logs -f $SERVICE
        else
            log_info "üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
            docker-compose -f $COMPOSE_FILE logs -f
        fi
        ;;
        
    status)
        log_info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose -f $COMPOSE_FILE ps
        
        echo ""
        log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health check:"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ model service
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            log_success "‚úÖ Model Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_error "‚ùå Model Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
        if curl -f http://localhost:80 > /dev/null 2>&1; then
            log_success "‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_error "‚ùå Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        if docker exec corporate-bot-redis redis-cli ping > /dev/null 2>&1; then
            log_success "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_error "‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
        if [[ "$DEPLOY_TYPE" == "gpu" ]]; then
            echo ""
            log_info "üñ•Ô∏è GPU —Å—Ç–∞—Ç—É—Å:"
            nvidia-smi --query-gpu=name,memory.used,memory.total,utilization.gpu --format=csv
        fi
        ;;
        
    update)
        log_info "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose -f $COMPOSE_FILE down
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è git)
        if [[ -d ".git" ]]; then
            log_info "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ git..."
            git pull origin main
        fi
        
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        log_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
        docker-compose -f $COMPOSE_FILE build --no-cache
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        log_info "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f $COMPOSE_FILE up -d
        
        log_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        ;;
        
    backup)
        log_info "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
        
        BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î
        if [[ -f "data/employees.db" ]]; then
            cp data/employees.db $BACKUP_DIR/
            log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
        fi
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if [[ -d "documents" ]]; then
            cp -r documents $BACKUP_DIR/
            log_success "–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
        fi
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if [[ -f ".env" ]]; then
            cp .env $BACKUP_DIR/
            log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        tar -czf "${BACKUP_DIR}.tar.gz" -C backups $(basename $BACKUP_DIR)
        rm -rf $BACKUP_DIR
        
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${BACKUP_DIR}.tar.gz"
        ;;
        
    restore)
        if [[ -z "$SERVICE" ]]; then
            log_error "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup_file.tar.gz>"
            exit 1
        fi
        
        log_info "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
        
        if [[ ! -f "$SERVICE" ]]; then
            log_error "–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $SERVICE"
            exit 1
        fi
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose -f $COMPOSE_FILE down
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        RESTORE_DIR="backups/restore_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $RESTORE_DIR
        tar -xzf "$SERVICE" -C $RESTORE_DIR
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if [[ -f "$RESTORE_DIR/data/employees.db" ]]; then
            cp "$RESTORE_DIR/data/employees.db" data/
            log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        fi
        
        if [[ -d "$RESTORE_DIR/documents" ]]; then
            cp -r "$RESTORE_DIR/documents" ./
            log_success "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        fi
        
        if [[ -f "$RESTORE_DIR/.env" ]]; then
            cp "$RESTORE_DIR/.env" ./
            log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        fi
        
        # –û—á–∏—Å—Ç–∫–∞
        rm -rf $RESTORE_DIR
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose -f $COMPOSE_FILE up -d
        
        log_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        ;;
        
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start, stop, restart, logs, status, update, backup, restore"
        exit 1
        ;;
esac 