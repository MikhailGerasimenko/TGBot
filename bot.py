import logging
from aiogram import Bot, types, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os
import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from database import verify_employee, log_registration_attempt, get_registration_attempts, get_all_employees
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
from sentence_transformers import SentenceTransformer
import numpy as np
from docx import Document
import re
from collections import defaultdict

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7987520742:AAHOXmsESsiP46HTQLPxu5PTzdDErj0XuwE'
ADMIN_CHAT_ID = 925237471

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è LLM
MODEL_NAME = "IlyaGusev/saiga2_7b_gguf"
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
MAX_LENGTH = 2048
MAX_NEW_TOKENS = 512

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RAG
EMBEDDING_MODEL_NAME = "sentence-transformers/all-MiniLM-L6-v2"
DOCUMENTS_DIR = "docs"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
llm = None
tokenizer = None
embedding_model = None
document_embeddings = None
document_chunks = []

# –û–±–Ω–æ–≤–ª—è–µ–º IC_CACHE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
IC_CACHE = {
    "employees": {},
    "last_sync": None,
    "sync_in_progress": False
}

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AUTHORIZED_USERS = {}
PENDING_REGISTRATIONS = {}  # user_id -> {step, name, employee_id, ...}

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REGISTRATION_ATTEMPTS = {}  # user_id -> {attempts: int, last_attempt: datetime}
MAX_ATTEMPTS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
RETRY_COMMANDS = ['retry', '–ø–æ–≤—Ç–æ—Ä', '–∑–∞–Ω–æ–≤–æ']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='/help'), KeyboardButton(text='/ask')],
    ],
    resize_keyboard=True
)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

async def send_admin_notification(text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=text,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def sync_with_1c():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    if IC_CACHE["sync_in_progress"]:
        return False
        
    try:
        IC_CACHE["sync_in_progress"] = True
        employees = await get_all_employees()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        IC_CACHE["employees"] = {
            emp["employee_id"]: emp for emp in employees
        }
        IC_CACHE["last_sync"] = datetime.now()
        logger.info("Successfully synced with local database")
        return True
        
    except Exception as e:
        logger.error(f"Error syncing with local database: {e}")
        return False
    finally:
        IC_CACHE["sync_in_progress"] = False

async def periodic_sync():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if (not IC_CACHE["last_sync"] or 
                datetime.now() - IC_CACHE["last_sync"] > timedelta(hours=1)):
                
                logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                success = await sync_with_1c()
                
                if success:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    await send_admin_notification(
                        f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
                        f"üìä –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫—ç—à–µ: {len(IC_CACHE['employees'])}\n"
                        f"üïí –í—Ä–µ–º—è: {IC_CACHE['last_sync'].strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    await asyncio.sleep(3600)  # 1 —á–∞—Å
                else:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –º–µ–Ω—å—à–µ
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            else:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_sync: {e}")
            await asyncio.sleep(300)

async def verify_user_in_1c(full_name: str, employee_id: str) -> Optional[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
        if not IC_CACHE["last_sync"] or datetime.now() - IC_CACHE["last_sync"] > timedelta(hours=1):
            await sync_with_1c()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
        for emp in IC_CACHE["employees"].values():
            if (emp["full_name"].lower() == full_name.lower() and 
                emp["employee_id"] == employee_id):
                return {
                    "verified": True,
                    "department": emp.get("department", ""),
                    "position": emp.get("position", ""),
                    "employee_id": employee_id,
                    "from_cache": True
                }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ë–î
        result = await verify_employee(full_name, employee_id)
        logger.info(f"Employee verification result for {full_name} (ID: {employee_id}): {result}")
        return result
        
    except Exception as e:
        logger.error(f"Employee verification error: {e}")
        return None

def can_try_registration(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if user_id not in REGISTRATION_ATTEMPTS:
        return True
        
    attempts = REGISTRATION_ATTEMPTS[user_id]
    now = datetime.now()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
    if (now - attempts['last_attempt']).days >= 1:
        attempts['attempts'] = 0
        return True
    
    return attempts['attempts'] < MAX_ATTEMPTS

def get_next_attempt_time(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    if user_id not in REGISTRATION_ATTEMPTS:
        return "—Å–µ–π—á–∞—Å"
        
    attempts = REGISTRATION_ATTEMPTS[user_id]
    next_time = attempts['last_attempt'] + timedelta(days=1)
    return next_time.strftime("%d.%m.%Y –≤ %H:%M")

def update_registration_attempts(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if user_id not in REGISTRATION_ATTEMPTS:
        REGISTRATION_ATTEMPTS[user_id] = {
            'attempts': 1,
            'last_attempt': datetime.now()
        }
    else:
        REGISTRATION_ATTEMPTS[user_id]['attempts'] += 1
        REGISTRATION_ATTEMPTS[user_id]['last_attempt'] = datetime.now()

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° LLM ==========

async def init_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
    global llm, tokenizer, embedding_model
    
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
        tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
        llm = AutoModelForCausalLM.from_pretrained(
            MODEL_NAME,
            torch_dtype=torch.float16 if DEVICE == "cuda" else torch.float32,
            device_map="auto" if DEVICE == "cuda" else None,
            trust_remote_code=True
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        embedding_model = SentenceTransformer(EMBEDDING_MODEL_NAME)
        if DEVICE == "cuda":
            embedding_model.to(DEVICE)
            
        logger.info("–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def extract_text_from_docx(file_path: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Word —Ñ–∞–π–ª–∞"""
    try:
        doc = Document(file_path)
        full_text = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        for para in doc.paragraphs:
            text = re.sub(r'\s+', ' ', para.text.strip())
            if text:
                full_text.append(text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    text = re.sub(r'\s+', ' ', cell.text.strip())
                    if text:
                        full_text.append(text)
        
        return '\n'.join(full_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return ""

def split_text_into_chunks(text: str, chunk_size: int = 500) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏"""
    sentences = text.split('.')
    chunks = []
    current_chunk = []
    current_length = 0
    
    for sentence in sentences:
        sentence = sentence.strip() + '.'
        sentence_length = len(sentence.split())
        
        if current_length + sentence_length > chunk_size:
            if current_chunk:
                chunks.append(' '.join(current_chunk))
            current_chunk = [sentence]
            current_length = sentence_length
        else:
            current_chunk.append(sentence)
            current_length += sentence_length
    
    if current_chunk:
        chunks.append(' '.join(current_chunk))
    
    return chunks

async def index_document(file_path: str) -> bool:
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    global document_embeddings, document_chunks
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = extract_text_from_docx(file_path)
        if not text:
            return False
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        chunks = split_text_into_chunks(text)
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        embeddings = embedding_model.encode(chunks)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        document_chunks.extend(chunks)
        if document_embeddings is None:
            document_embeddings = embeddings
        else:
            document_embeddings = np.vstack([document_embeddings, embeddings])
            
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {file_path} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False

def find_relevant_chunks(query: str, top_k: int = 3) -> List[str]:
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤"""
    if not document_embeddings is None and len(document_chunks) > 0:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = embedding_model.encode([query])[0]
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            similarities = np.dot(document_embeddings, query_embedding)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-k —á–∞–Ω–∫–æ–≤
            top_indices = np.argsort(similarities)[-top_k:][::-1]
            return [document_chunks[i] for i in top_indices]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {e}")
    
    return []

async def generate_response(query: str, context: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        system_prompt = """–¢—ã ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""
        
        if context:
            prompt = f"<s>[INST] <<SYS>>\n{system_prompt}\n<</SYS>>\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {query} [/INST]"
        else:
            prompt = f"<s>[INST] <<SYS>>\n{system_prompt}\n<</SYS>>\n\n–í–æ–ø—Ä–æ—Å: {query} [/INST]"
        
        # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
        inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=MAX_LENGTH)
        if DEVICE == "cuda":
            inputs = inputs.to(DEVICE)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with torch.no_grad():
            outputs = llm.generate(
                **inputs,
                max_new_tokens=MAX_NEW_TOKENS,
                do_sample=True,
                temperature=0.7,
                top_p=0.95,
                pad_token_id=tokenizer.eos_token_id
            )
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–º–ø—Ç–∞
        response = response.split("[/INST]")[-1].strip()
        
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

def setup_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command('start'))
    async def start_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id in AUTHORIZED_USERS:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.', reply_markup=main_kb)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if can_try_registration(user_id):
                PENDING_REGISTRATIONS[user_id] = {'step': 'name'}
                await message.answer(
                    '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n'
                    '(–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ 1–°, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)'
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                next_attempt = get_next_attempt_time(user_id)
                await message.answer(
                    f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {next_attempt}.\n\n"
                    f"–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

    @dp.message(lambda message: message.text and message.text.lower() in RETRY_COMMANDS)
    async def retry_registration(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = message.from_user.id
        
        if user_id in AUTHORIZED_USERS:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
            
        if can_try_registration(user_id):
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if user_id in PENDING_REGISTRATIONS:
                del PENDING_REGISTRATIONS[user_id]
                
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            PENDING_REGISTRATIONS[user_id] = {'step': 'name'}
            await message.answer(
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"
                "(–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ 1–°, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)"
            )
        else:
            next_attempt = get_next_attempt_time(user_id)
            await message.answer(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {next_attempt}.\n\n"
                f"–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    @dp.message(lambda message: message.from_user.id in PENDING_REGISTRATIONS)
    async def registration_handler(message: types.Message):
        user_id = message.from_user.id
        reg_data = PENDING_REGISTRATIONS[user_id]
        
        if reg_data['step'] == 'name':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –§–ò–û (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–ª–æ–≤–∞)
            name_parts = message.text.strip().split()
            if len(name_parts) != 3:
                await message.answer(
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é\n'
                    '–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ\n'
                    '–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n'
                    '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–≤—Ç–æ—Ä"'
                )
                return
            
            reg_data['name'] = message.text.strip()
            reg_data['step'] = 'employee_id'
            await message.answer(
                '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n'
                '(–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ 1–°, –Ω–∞–ø—Ä–∏–º–µ—Ä: E001)'
            )
            
        elif reg_data['step'] == 'employee_id':
            employee_id = message.text.strip()
            reg_data['employee_id'] = employee_id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
            verification_result = await verify_user_in_1c(reg_data['name'], employee_id)
            
            if verification_result and verification_result.get('verified'):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
                AUTHORIZED_USERS[user_id] = {
                    'name': reg_data['name'],
                    'employee_id': employee_id,
                    'department': verification_result.get('department', ''),
                    'position': verification_result.get('position', ''),
                    'verified_at': datetime.now().isoformat()
                }
                del PENDING_REGISTRATIONS[user_id]
                
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if user_id in REGISTRATION_ATTEMPTS:
                    del REGISTRATION_ATTEMPTS[user_id]
                
                await message.answer(
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"üë§ –§–ò–û: {reg_data['name']}\n"
                    f"üî¢ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {employee_id}\n"
                    f"üìù –î–æ–ª–∂–Ω–æ—Å—Ç—å: {verification_result.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üè¢ –û—Ç–¥–µ–ª: {verification_result.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
                    reply_markup=main_kb
                )
                
                await send_admin_notification(
                    f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                    f"üë§ {reg_data['name']}\n"
                    f"üî¢ –¢–∞–±–µ–ª—å–Ω—ã–π: {employee_id}\n"
                    f"üìã {verification_result.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üè¢ {verification_result.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                update_registration_attempts(user_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_msg = [
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n",
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:",
                    "1. –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –§–ò–û",
                    "2. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
                    "3. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –±–∞–∑–æ–π\n"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
                attempts_left = MAX_ATTEMPTS - REGISTRATION_ATTEMPTS[user_id]['attempts']
                if attempts_left > 0:
                    error_msg.append(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
                    error_msg.append("–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–≤—Ç–æ—Ä'")
                else:
                    next_attempt = get_next_attempt_time(user_id)
                    error_msg.append(f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {next_attempt}")
                
                await message.answer('\n'.join(error_msg))
                del PENDING_REGISTRATIONS[user_id]
                
                await send_admin_notification(
                    f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
                    f"üë§ –í–≤–µ–¥–µ–Ω–æ –§–ò–û: {reg_data['name']}\n"
                    f"üî¢ –¢–∞–±–µ–ª—å–Ω—ã–π: {employee_id}\n"
                    f"üÜî Telegram ID: {user_id}\n"
                    f"üìä –ü–æ–ø—ã—Ç–∫–∞: {REGISTRATION_ATTEMPTS[user_id]['attempts']}/{MAX_ATTEMPTS}"
                )

    @dp.message(Command('ask'))
    async def ask_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        user_id = message.from_user.id
        
        if user_id not in AUTHORIZED_USERS:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        USER_STATES[user_id] = {"awaiting_question": True}
        await message.answer(
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    @dp.message(lambda message: message.from_user.id in USER_STATES and USER_STATES[message.from_user.id].get("awaiting_question"))
    async def process_question(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        USER_STATES[user_id]["awaiting_question"] = False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
            relevant_chunks = find_relevant_chunks(message.text)
            context = "\n\n".join(relevant_chunks) if relevant_chunks else ""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await generate_response(message.text, context)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await processing_msg.edit_text(
                f"–í–æ–ø—Ä–æ—Å: {message.text}\n\n"
                f"–û—Ç–≤–µ—Ç: {response}",
                reply_markup=main_kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await processing_msg.edit_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_kb
            )
    
    @dp.message(Command('train'))
    async def train_handler(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if message.from_user.id != ADMIN_CHAT_ID:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        USER_STATES[message.from_user.id] = {"awaiting_document": True}
        await message.answer(
            "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    @dp.message(lambda m: m.document and m.document.file_name.endswith('.docx'))
    async def process_document(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if message.from_user.id != ADMIN_CHAT_ID or \
           message.from_user.id not in USER_STATES or \
           not USER_STATES[message.from_user.id].get("awaiting_document"):
            return
        
        USER_STATES[message.from_user.id]["awaiting_document"] = False
        processing_msg = await message.answer("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
            os.makedirs(DOCUMENTS_DIR, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            file_path = os.path.join(DOCUMENTS_DIR, message.document.file_name)
            await bot.download(
                message.document,
                destination=file_path
            )
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if await index_document(file_path):
                await processing_msg.edit_text(
                    "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω!",
                    reply_markup=main_kb
                )
            else:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.",
                    reply_markup=main_kb
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                reply_markup=main_kb
            )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, retry –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    @dp.message(Command('help'))
    async def help_handler(message: types.Message):
        help_text = (
            '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n'
            '/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n'
            '/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n'
            '–ø–æ–≤—Ç–æ—Ä - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n'
            '/help - –ø–æ–º–æ—â—å'
        )
        if message.from_user.id == ADMIN_CHAT_ID:
            help_text += '\n\n<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n' \
                        '/train - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n' \
                        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π'
        
        await message.answer(help_text, parse_mode='HTML', reply_markup=main_kb)