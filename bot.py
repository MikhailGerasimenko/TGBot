import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests
import json
import asyncio

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
API_TOKEN = '7987520742:AAHOXmsESsiP46HTQLPxu5PTzdDErj0XuwE'
GROQ_API_KEY = '–í–ê–®_GROQ_API_KEY'
ADMIN_CHAT_ID = 925237471  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
AUTHORIZED_USERS = {}  # {user_id: {'name': '–§–ò–û', 'phone': '—Ç–µ–ª–µ—Ñ–æ–Ω'}}
PENDING_REGISTRATIONS = {}  # {user_id: {'name': '–§–ò–û', 'phone': '—Ç–µ–ª–µ—Ñ–æ–Ω', 'step': str}}
ROOMS = {
    '101': False,
    '102': False,
    '103': False
}

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='/status'), KeyboardButton(text='/memo')],
        [KeyboardButton(text='/help')]
    ],
    resize_keyboard=True
)

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_CHAT_ID

async def send_guaranteed_message(chat_id: int, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π"""
    for attempt in range(3):
        try:
            await bot.send_message(chat_id, text, **kwargs)
            return True
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await asyncio.sleep(1)
    return False

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
@dp.message(Command('start'))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS:
        await send_guaranteed_message(user_id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_kb)
    elif user_id in PENDING_REGISTRATIONS:
        await send_guaranteed_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏...")
    else:
        PENDING_REGISTRATIONS[user_id] = {'step': 'name'}
        await send_guaranteed_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

@dp.message(lambda message: message.from_user.id in PENDING_REGISTRATIONS)
async def registration_handler(message: types.Message):
    user_id = message.from_user.id
    reg_data = PENDING_REGISTRATIONS[user_id]
    
    if reg_data['step'] == 'name':
        reg_data['name'] = message.text.strip()
        reg_data['step'] = 'phone'
        await send_guaranteed_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    
    elif reg_data['step'] == 'phone':
        reg_data['phone'] = message.text.strip()
        user_info = await bot.get_chat(user_id)
        notification = (
            f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info.full_name}\n"
            f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
            f"üìù <b>–§–ò–û:</b> {reg_data['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {reg_data['phone']}\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"<code>/approve {user_id}</code>"
        )
        if await send_guaranteed_message(ADMIN_CHAT_ID, notification):
            await send_guaranteed_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        else:
            await send_guaranteed_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ approve_handler

@dp.message(Command('approve'))
async def approve_handler(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(message.from_user.id):
            await send_guaranteed_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        try:
            _, user_id = message.text.split()
            user_id = int(user_id)
        except:
            await send_guaranteed_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: /approve user_id")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        if user_id not in PENDING_REGISTRATIONS:
            await send_guaranteed_message(message.chat.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        reg_data = PENDING_REGISTRATIONS[user_id]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        AUTHORIZED_USERS[user_id] = {
            'name': reg_data['name'],
            'phone': reg_data['phone']
        }
        del PENDING_REGISTRATIONS[user_id]
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await send_guaranteed_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reg_data['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_guaranteed_message(
            user_id,
            "üéâ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=main_kb
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_handler: {e}")
        await send_guaranteed_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(Command('status'))
async def status_handler(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await send_guaranteed_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    status = "\n".join(
        f"–ù–æ–º–µ—Ä {room}: {'‚úÖ –£–±—Ä–∞–Ω' if cleaned else '‚ùå –ù–µ —É–±—Ä–∞–Ω'}"
        for room, cleaned in ROOMS.items()
    )
    await send_guaranteed_message(
        message.chat.id,
        f"<b>üè® –°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n{status}",
        parse_mode='HTML'
    )

@dp.message(Command('done'))
async def done_handler(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await send_guaranteed_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        _, room = message.text.split()
        if room not in ROOMS:
            raise ValueError
        
        ROOMS[room] = True
        user = AUTHORIZED_USERS[message.from_user.id]
        
        await send_guaranteed_message(
            message.chat.id,
            f"‚úÖ –ù–æ–º–µ—Ä {room} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–±—Ä–∞–Ω–Ω—ã–π!"
        )
        
        await send_guaranteed_message(
            ADMIN_CHAT_ID,
            f"üßπ –ù–æ–º–µ—Ä {room} —É–±—Ä–∞–Ω\n"
            f"üë§ –£–±–æ—Ä—â–∏–∫: {user['name']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user['phone']}"
        )
    except:
        await send_guaranteed_message(
            message.chat.id,
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /done –Ω–æ–º–µ—Ä_–∫–æ–º–Ω–∞—Ç—ã\n–ü—Ä–∏–º–µ—Ä: /done 101"
        )

@dp.message(Command('memo'))
async def memo_handler(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await send_guaranteed_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    await send_guaranteed_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —É–±–æ—Ä–∫–µ:")

@dp.message(lambda message: message.reply_to_message and message.reply_to_message.text == "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —É–±–æ—Ä–∫–µ:")
async def groq_handler(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await send_guaranteed_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await send_guaranteed_message(message.chat.id, "‚è≥ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    try:
        url = 'https://api.groq.com/v1/chat/completions'
        headers = {
            'Authorization': f'Bearer {GROQ_API_KEY}',
            'Content-Type': 'application/json'
        }
        data = {
            'model': 'llama3-8b-8192',
            'messages': [
                {'role': 'system', 'content': '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–±–æ—Ä–∫–µ –Ω–æ–º–µ—Ä–æ–≤.'},
                {'role': 'user', 'content': message.text}
            ]
        }
        
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        answer = response.json()['choices'][0]['message']['content']
        
        await send_guaranteed_message(message.chat.id, answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Groq API: {e}")
        await send_guaranteed_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")

@dp.message(Command('help'))
async def help_handler(message: types.Message):
    help_text = (
        "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/status - —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–æ–≤\n"
        "/done [–Ω–æ–º–µ—Ä] - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —É–±—Ä–∞–Ω–Ω—ã–π\n"
        "/memo - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É–±–æ—Ä–∫–µ\n"
        "/help - –ø–æ–º–æ—â—å"
    )
    await send_guaranteed_message(message.chat.id, help_text, parse_mode='HTML')

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())